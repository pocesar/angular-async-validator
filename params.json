{"name":"Angular-async-validator","tagline":"Directives and service for reusable async validators, write once, use everywhere.","body":"[![Build Status](https://travis-ci.org/pocesar/angular-async-validator.svg?branch=master)](https://travis-ci.org/pocesar/angular-async-validator) [![Coverage Status](https://coveralls.io/repos/pocesar/angular-async-validator/badge.svg)](https://coveralls.io/r/pocesar/angular-async-validator)\r\n\r\n[![NPM](https://nodei.co/npm/angular-async-validator.png)](https://nodei.co/npm/angular-async-validator/)\r\n\r\nAngular Async Validator\r\n=====\r\n\r\nThis module enables you to register your own validation rules, or overwrite existing ones. Makes every validation 'promise based', so it can deal with both synchronous  and asynchronous validations. Also, sometimes you want validate an entire form when a model changes, which currently there are no good ways to do this, hence this module, because\r\nvalidation and form manipulation in Angular 1.x is a pain by itself.\r\n\r\nProvides no validation functions out-of-the-box. You may reuse the ones from Angular without a problem.\r\n\r\nCode was based off [ui-validate](http://angular-ui.github.io/ui-utils/#/validate) initially, but it's too simple and lagging behind still using $parsers and $formatters since it need to retain 1.2 compatibility.\r\n\r\nThis module requires Angular 1.3+, and has no dependencies other than Angular itself.\r\n\r\nIt also supports 3rd party promise libraries such as RSVP, Q, Bluebird, etc.\r\n\r\n[DEMO](http://plnkr.co/edit/jIhkAPShgK4ggRYN4N1S?p=preview)\r\n\r\n## Motivation\r\n\r\nCurrent module implementations only deal with sync validations, validators set in scopes or controllers,\r\nor provide 1 directive for each type of validation (`validate-number`, `validate-presence`, `validate-stuff`, etc), which is an overkill.\r\n\r\nAsync should be norm, and regardless if the validation itself isn't asynchronous, because the UI is asynchronous afterall. Plus there are a plethora of quality validation Javascript libraries, having to rely on Angular built-in ones is too limited, or you having to write a directive for each validation you need is also overkill.\r\n\r\nMain goal is to be able with few reusable directives to rule them all, plus 1 service and 1 provider in a concise\r\nmodule that does it's job well without all the bells and whistles.\r\n\r\n## Usage\r\n\r\n```js\r\nangular.module('yourapp', [\r\n   // add this module\r\n   'AsyncValidator'\r\n])\r\n// Configure your validators\r\n.config(['AsyncValidatorProvider', function(AsyncValidatorProvider){\r\n\r\n  AsyncValidatorProvider\r\n  // register new reusable validation\r\n  .register('name', ['SomeHttpService', function(SomeHttpService){\r\n    // treat your validator like a service\r\n    return function(model, options){ // receives the full blown ngModelController\r\n      return SomeHttpService.check(model.$modelValue).then(function(returnedFromServer){\r\n        if (returnedFromServer.status === 'ok') {\r\n          return true; // returning boolean is fine, you can throw to break the validation\r\n        }\r\n        return false; // may reject using $q.reject() as well, but since false will forcefully reject the validation\r\n      });\r\n    }\r\n  }])\r\n  // by default, when the validation is truthy, the final AsyncValidator.run() call will have the ngModel.$modelValue\r\n\r\n\r\n  .register('required', [function(){\r\n    return function(value, options){\r\n      // options === {}\r\n      return angular.isDefined(value);\r\n    };\r\n  }], { valueFrom: '$$rawModelValue' }) // pluck it out from ngModel, using $$rawModelValue instead of $modelValue, because $modelValue might only be defined after required validation is actually called\r\n\r\n\r\n  .register('usingValidateJs', [function(){\r\n    return function(value, options){\r\n      if (options.someExtraOptions) {\r\n        console.log('extra options');\r\n      }\r\n      return validate.single(value, {\r\n        presence: true,\r\n        length: {\r\n          minimum: 5\r\n        },\r\n        format: /1910-100/\r\n      });\r\n    };\r\n  }], { valueFrom: '$viewValue', options: { someExtraOptions: true} })\r\n\r\n  register('equals', function(){\r\n    return function(value, options) {\r\n      if (!angular.isDefined(options.to)) {\r\n        return false;\r\n      }\r\n      return angular.equals(value.$modelValue, options.to);\r\n    };\r\n  })\r\n  ;\r\n\r\n}])\r\n// reuse validation programatically\r\n.controller('Ctrl', ['AsyncValidator', function(AsyncValidator){\r\n\r\n  AsyncValidator.run('name', 'Validate this string', { inlineOptions: true }).then(function(currentValidValue){\r\n    // worked\r\n    currentValidValue === 'Validate this string'\r\n  }, function(){\r\n    // failed\r\n\r\n  });\r\n\r\n  this.controllerValidation = function($value){\r\n     return $value === 'asdf';\r\n  };\r\n\r\n  this.data = {\r\n      n1: 'asdf',\r\n      n2: '1234',\r\n      n3: 'fsa',\r\n      n4: 'fda',\r\n      n5: 'dsa',\r\n      n6: 'ds',\r\n      n7: 'dsaa',\r\n      value: '2',\r\n      ok: 'ok'\r\n  };\r\n\r\n  this.hasChanged = false;\r\n}]);\r\n```\r\n\r\nUse it in your HTML input ng-models (notice they are all expressions, therefore need to be a string):\r\n\r\n```html\r\n<div ng-controller=\"Ctrl as ctrl\">\r\n\r\n   <input\r\n      async-validator=\"{ required: 'required' }\"\r\n      async-validator-options=\"{ inline: true }\"\r\n      ng-model=\"ctrl.data.n1\"\r\n      type=\"text\"\r\n      >\r\n\r\n   <input\r\n      async-validator=\"'$model.$modelValue.length > 3'\"\r\n      async-validator-options-validator=\"{ outline: true }\"\r\n      ng-model=\"ctrl.data.n2\"\r\n      type=\"text\"\r\n      >\r\n\r\n   <input\r\n      async-validator=\"['strongpassword','length']\"\r\n      ng-model=\"ctrl.data.n3\"\r\n      type=\"text\"\r\n      >\r\n\r\n   <input\r\n      async-validator=\"'equals'\"\r\n      async-validator-options-equals=\"{ to: ctrl.data.n3 }\"\r\n      async-validator-watch=\"ctrl.data.n3\"\r\n      ng-model=\"ctrl.data.n4\"\r\n      type=\"text\"\r\n      >\r\n\r\n   <input\r\n      async-validator=\"'nome'\"\r\n      async-validator-options-nome=\"{ forNome: 'ok' }\"\r\n      ng-model=\"ctrl.data.n5\"\r\n      type=\"text\"\r\n      >\r\n\r\n   <input\r\n      async-validator=\"{ custom: 'ctrl.controllerValidation($value)' }\"\r\n      ng-model=\"ctrl.data.n6\"\r\n      type=\"text\"\r\n      >\r\n\r\n   <input\r\n      async-validator=\"{ inline: '$value != ctrl.data.ok && !$error.required' }\"\r\n      required\r\n      ng-model=\"ctrl.data.n7\"\r\n      type=\"text\"\r\n      >\r\n      <!-- can mix synchronous angular validations with async, in this case, using the \"required\" -->\r\n</div>\r\n```\r\n\r\nThe helper attribute `async-validator-watch` can watch an expression. If it changes (regardless if truthy or falsy) will trigger the `$validate()` call on the ngModel.\r\n\r\n```html\r\n   <input\r\n      async-validator-watch=\"'ctrl.hasChanged'\"\r\n      async-validator=\"'$model.$viewValue != ctrl.data.value'\"\r\n      ng-model=\"data.n6\"\r\n      type=\"text\"\r\n      >\r\n   <input\r\n      async-validator-watch=\"ctrl.data\"\r\n      async-validator=\"'$model.$viewValue != ctrl.data.value'\"\r\n      ng-model=\"data.n6\"\r\n      type=\"text\"\r\n      >\r\n   <input\r\n      async-validator-watch=\"['ctrl.data','ctrl.hasChanged']\"\r\n      async-validator=\"'$model.$viewValue != ctrl.data.value'\"\r\n      ng-model=\"data.n6\"\r\n      type=\"text\"\r\n      >\r\n```\r\n\r\nFor your own options that apply to all validators, use `async-validator-options=\"{}\"`. If you need to specify specifically for one validator write it as `async-validator-options-REGISTEREDNAME=\"{}\"`. Scope and controller variables can be referenced in the options.\r\n\r\nThe options goes to the least specific and get merged as it becomes more specific. For example:\r\n\r\n```html\r\n  <input\r\n    async-validator=\"['required','specific']\"\r\n    async-validator-options=\"{lol: 'yes', ok: true}\"\r\n    async-validator-options-specific=\"{ok: false}\"\r\n    >\r\n  <!-- required validator will receive the {lol: 'yes', ok: true} -->\r\n  <!-- specific validator will receive the {lol: 'yes', ok: false} -->\r\n```\r\n\r\nLocals available:\r\n\r\n* `$value` current `$modelValue`, might be undefined / NaN\r\n* `$error` current `$error` in the underlaying ng-model\r\n* `$model` current ng-model exposed\r\n* `$options` current merged `async-validation-options-*`\r\n\r\nUse it in your form once and apply the same validation to all underlaying models (must name your inputs or manually add them using `async-validator-add`):\r\n\r\n```html\r\n<form async-validator-form=\"{ required: 'required', dummy: 'ctrl.controllerValidation($value)' }\">\r\n  <input\r\n      type=\"email\"\r\n      name=\"email\"\r\n      ng-model\"ctrl.data.email\">\r\n  <!-- value will have to pass Angular internal required and our registered dummy validator -->\r\n\r\n  <input\r\n      type=\"tel\"\r\n      ng-model\"ctrl.data.phone\"\r\n      async-validator-add\r\n      >\r\n  <!-- value will have to pass Angular internal required and our registered dummy validator -->\r\n</form>\r\n```\r\n\r\n## Options\r\n\r\nWhen registering a validator, you can pass your own options to it using the third parameter as an object and setting the `options` member.\r\n\r\n* `valueFrom` where to get the current value. Defaults to `false`, and passes the whole ngModelController to the validator function as the first parameter. You can set to model properties like `$viewValue`, `$modelValue`, `$$lastCommittedViewValue`, `$$rawModelValue`, etc\r\n\r\n* `options` any options that the validator function receives as the second parameter, defaults to `{}`\r\n\r\n* `overwrite` if you set to false, it will throw if there's another validator with same name, defaults to `true`\r\n\r\n* `removeSync` removes synchronous validators if they have the same name as your registered validator, defaults to `true`. Eg: using `<input ng-model=\"model\" required async-validator=\"'required'\">` will delete the default `required` validator\r\n\r\n* `silentRejection` if sets to false, will rethrow the error. will turn any throws and rejections into an \"invalid\" validation, defaults to true.\r\n\r\n## License\r\n\r\nMIT\r\n","google":"UA-10569443-34","note":"Don't delete this file! It's used internally to help with page regeneration."}